{"version":3,"sources":["component/Signin/Signin.js","component/Webcam.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","useState","setName","setCreateRoom","setJoinRoom","className","placeholder","type","onChange","event","target","value","Row","styled","div","Container","Video","video","Webcam","UserVideo","PartnerVideo","incomingCall","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","loading","setLoading","hangup","setHangup","userVideo","useRef","partnerVideo","socket","useEffect","current","io","connect","navigator","mediaDevices","getUserMedia","audio","then","srcObject","on","id","console","log","data","from","signal","emit","style","zIndex","right","width","height","bottom","margin","background","playsInline","muted","ref","autoPlay","minWidth","minHeight","Button","variant","disabled","onClick","peer","Peer","initiator","trickle","to","Object","keys","map","key","userToCall","signalData","callPeer","as","animation","size","role","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbe0e362.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Signin.css';\r\n\r\nfunction SignIn() {\r\n  const [name, setName] = useState('');\r\n  const [createRoom, setCreateRoom] = useState('');\r\n  const [joinRoom, setJoinRoom] = useState('');\r\n\r\n\r\n  return (\r\n            <div className=\"joinOuterContainer\">\r\n               <div className=\"joinInnerContainer\" >\r\n                 <h1 className='heading'> Video Call</h1>\r\n                       <div >   <input placeholder=\"Name\" className=\"joinInput\" type=\"text\" onChange={(event) => setName(event.target.value)} /> </div>\r\n                       <div > <input placeholder=\"Create Room\" className=\"joinInput mt-20\" type=\"text\" onChange={(event) => setCreateRoom(event.target.value)} /> </div>\r\n                       <div > <input placeholder=\"Join Room\" className=\"joinInput mt-20\" type=\"text\" onChange={(event) => setJoinRoom(event.target.value)} /> </div>\r\n                  \r\n                  <td className=\"sameer\">  <button className={'button mt-20'} type=\"submit\" >Create Room</button></td>\r\n                  <td> <button className={'button mt-20'} type=\"submit\" >Join Room</button></td>\r\n                     \r\n                 \r\n               </div>\r\n             </div>\r\n    );\r\n}\r\n\r\nexport default SignIn;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport './Webcam.css';\r\nimport SignIn from './Signin/Signin';\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst Video = styled.video`\r\n  border: 1px solid blue;\r\n  width: 50%;\r\n  height: 50%;\r\n`;\r\nfunction Webcam() {\r\n  const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [loading, setLoading] = useState(false)\r\n  const [hangup, setHangup] = useState(false)\r\n\r\n  const userVideo = useRef();\r\n  const partnerVideo = useRef();\r\n  const socket = useRef();\r\n\r\n  useEffect(() => {\r\n    socket.current = io.connect(\"http://localhost:4040\");\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n      setStream(stream);\r\n      if (userVideo.current) {\r\n        userVideo.current.srcObject = stream;\r\n\r\n      }\r\n    });\r\n\r\n    socket.current.on(\"yourID\", (id) => {\r\n      console.log(\"yourID=\", id);\r\n\r\n      setYourID(id);\r\n    });\r\n    socket.current.on(\"allUsers\", (users) => { setUsers(users); });\r\n    socket.current.on(\"hey\", (data) => {\r\n      setReceivingCall(true);\r\n      setCaller(data.from);\r\n      setCallerSignal(data.signal);\r\n      setLoading(true)\r\n\r\n    });\r\n  \r\n\r\n\r\n  }, []); console.log(\"hangup\" + hangup);\r\n\r\n\r\n\r\n  function callPeer(id) {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream\r\n    });\r\n    peer.on(\"signal\", data => {\r\n      socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID })\r\n    })\r\n\r\n    peer.on(\"stream\", stream => {\r\n\r\n      if (partnerVideo.current) {\r\n        partnerVideo.current.srcObject = stream;\r\n      };\r\n\r\n\r\n    });\r\n\r\n    socket.current.on(\"callAccepted\", signal => {\r\n      setCallAccepted(true)\r\n      peer.signal(signal);\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  function acceptCall() {\r\n    setCallAccepted(true);\r\n\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: true,\r\n      stream: stream\r\n    });\r\n\r\n    peer.on(\"signal\", data => {\r\n      socket.current.emit(\"acceptCall\", { signal: data, to: caller });\r\n    })\r\n\r\n\r\n\r\n    peer.on(\"stream\", stream => { partnerVideo.current.srcObject = stream; });\r\n\r\n    peer.signal(callerSignal);\r\n  }\r\n\r\n  if(hangup) {\r\n    \r\n    socket.current.emit('disconnect',console.log(\"call disconnected\"));\r\n  }\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = (\r\n      <Video style={{\r\n        zIndex: 2,\r\n        right: 0,\r\n        width: 385,\r\n        height: 500,\r\n        bottom: 5,\r\n        margin: 5,\r\n        background: 'white',\r\n      }} playsInline muted ref={userVideo} autoPlay\r\n      />\r\n    );\r\n  }\r\n\r\n  let PartnerVideo;\r\n  if (callAccepted) {\r\n    PartnerVideo = (\r\n      <Video style={{\r\n        zIndex: 1,\r\n        bottom: 0,\r\n        minWidth: '100%',\r\n        minHeight: '100%',\r\n        background: 'white',\r\n      }}\r\n        playsInline ref={partnerVideo} autoPlay\r\n      />\r\n    );\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = (\r\n      <div>\r\n        <Button variant=\"success\" disabled>{caller} is calling you</Button>\r\n        <Button variant=\"danger\" onClick={acceptCall}>Accept</Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <SignIn>  </SignIn>\r\n      {UserVideo}\r\n      {PartnerVideo}\r\n\r\n\r\n      <Row> {Object.keys(users).map(key => {\r\n        if (key === yourID) {\r\n          return null;\r\n        }\r\n        return (\r\n          <Button variant='success' onClick={() => callPeer(key)}>call</Button>\r\n        );\r\n      })\r\n      }</Row>\r\n      <Row\r\n      >\r\n        {loading ? (incomingCall) : (<Button variant=\"primary\" disabled>\r\n          <ReactBootStrap.Spinner\r\n            as=\"span\"\r\n            animation=\"grow\"\r\n            size=\"sm\"\r\n            role=\"status\"\r\n            aria-hidden=\"true\"\r\n          />\r\n          Loading...\r\n        </Button>)}\r\n      </Row>\r\n\r\n      <Button variant=\"danger\" onClick={() => { setHangup(true) }} >Hangup</Button>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Webcam;","import React from 'react';\nimport './App.css';\nimport Webcam from './component/Webcam';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Webcam/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}